# example with global vars
# main.tf

# Define provider (in this case, AWS)
provider "aws" {
  region = var.aws_region
}

# Global Variables
variable "aws_region" {
  description = "The AWS region where resources will be provisioned."
  default     = "us-east-1"
}

variable "db_instance_type" {
  description = "The instance type for the RDS database."
  default     = "db.t2.micro"
}

variable "db_allocated_storage" {
  description = "The allocated storage for the RDS database (in GB)."
  default     = 20
}

variable "db_engine_version" {
  description = "The version of the database engine."
  default     = "5.7"
}

variable "db_username" {
  description = "The username for the RDS database."
  default     = "admin"
}

variable "db_password" {
  description = "The password for the RDS database."
  default     = "password"
}

variable "web_instance_type" {
  description = "The instance type for the EC2 web server."
  default     = "t2.micro"
}

variable "email" {
  description = "The email address for Let's Encrypt SSL certificate."
  default     = "your.email@example.com"
}

variable "domain" {
  description = "The domain for Let's Encrypt SSL certificate."
  default     = "yourdomain.com"
}

# Create a security group for the web server
resource "aws_security_group" "web_sg" {
  name        = "web_sg"
  description = "Security group for web server"
  
  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  
  ingress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# Create an RDS database instance
resource "aws_db_instance" "database" {
  allocated_storage    = var.db_allocated_storage
  storage_type         = "gp2"
  engine               = "mysql"
  engine_version       = var.db_engine_version
  instance_class       = var.db_instance_type
  name                 = "mydatabase"
  username             = var.db_username
  password             = var.db_password
  publicly_accessible  = true
  vpc_security_group_ids = [aws_security_group.web_sg.id]
}

# Create an EC2 instance
resource "aws_instance" "web_server" {
  ami           = "ami-0c55b159cbfafe1f0"
  instance_type = var.web_instance_type
  security_groups = [aws_security_group.web_sg.name]
  tags = {
    Name = "WebServerInstance"
  }
  
  user_data = <<-EOF
              #!/bin/bash
              sudo yum update -y
              sudo yum install docker -y
              sudo service docker start
              
              # Create a simple HTML file
              echo "<html><body><h1>Hello, World!</h1></body></html>" > index.html
              
              # Create a Dockerfile for the web application
              cat <<EOT >> Dockerfile
              FROM nginx:alpine
              COPY index.html /usr/share/nginx/html/index.html
              EOT
              
              # Build and run the Docker container
              sudo docker build -t my-web-app .
              sudo docker run -d -p 80:80 my-web-app
              
              # Install certbot for Let's Encrypt
              sudo yum install certbot python3-certbot-nginx -y
              
              # Obtain SSL certificate from Let's Encrypt
              sudo certbot certonly --nginx --agree-tos --email ${var.email} -d ${var.domain}
              
              # Restart Nginx to apply SSL changes
              sudo service nginx restart
              EOF
}

# GitHub Actions Workflow for CI/CD
resource "github_actions_workflow" "terraform_workflow" {
  name     = "Terraform CI/CD"
  on       = "push"
  resolves = ["deploy"]

  # CI/CD Pipeline Steps
  workflow_dispatch {
    inputs = {
      environment = "production"
    }
  }

  action "deploy" {
    uses    = "actions/checkout@v2"
    runs    = "./deploy.sh"
    secrets = ["AWS_ACCESS_KEY_ID", "AWS_SECRET_ACCESS_KEY"]
  }
}
